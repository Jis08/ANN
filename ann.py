# -*- coding: utf-8 -*-
"""ANN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_OPPZC47uw4YFaK_aFZMxW9L2yBEOMGH
"""

# Install necessary libraries
!pip install tensorflow scikit-learn pandas matplotlib sexmachine

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_curve, auc
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.utils import to_categorical
from datetime import datetime
import sexmachine.detector as gender

def read_datasets():
    """Reads users profile from CSV files"""
    genuine_users = pd.read_csv("/content/users.csv")
    fake_users = pd.read_csv("/content/fusers.csv")

    # Combine datasets and create labels
    data = pd.concat([genuine_users, fake_users])
    labels = np.array([1] * len(genuine_users) + [0] * len(fake_users))  # 1 for genuine, 0 for fake

    return data, labels

def predict_sex(names):
    """Predicts the gender based on names using the sexmachine library"""
    sex_predictor = gender.Detector(unknown_value="unknown", case_sensitive=False)
    first_names = names.str.split(' ').str.get(0)
    sex = first_names.apply(sex_predictor.get_gender)
    sex_dict = {'female': -2, 'mostly_female': -1, 'unknown': 0, 'mostly_male': 1, 'male': 2}
    return sex.map(sex_dict).astype(int)

def extract_features(data):
    """Performs feature engineering on the dataset"""
    data['sex_code'] = predict_sex(data['name'])
    lang_list = list(enumerate(np.unique(data['lang'])))
    lang_dict = {name: i for i, name in lang_list}
    data['lang_code'] = data['lang'].map(lang_dict).astype(int)

    # Select relevant features
    feature_columns = ['statuses_count', 'followers_count', 'friends_count',
                       'favourites_count', 'listed_count', 'sex_code', 'lang_code']
    return data[feature_columns]

!pip install gender-guesser

import gender_guesser.detector as gender

def predict_sex(names):
    """Predict gender based on first names using gender-guesser."""
    detector = gender.Detector(case_sensitive=False)

    # Extract first names
    first_names = names.str.split(' ').str.get(0).fillna('unknown')

    # Predict gender
    sex = first_names.apply(detector.get_gender)

    # Map gender categories to numerical values
    sex_dict = {
        'female': -2,
        'mostly_female': -1,
        'unknown': 0,
        'andy': 0,  # androgynous
        'mostly_male': 1,
        'male': 2
    }
    return sex.map(sex_dict).astype(int)

# Load the data
data, labels = read_datasets()

# Extract features
data = extract_features(data)

# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)

# Normalize the data
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Build the model
model = Sequential([
    Dense(16, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(8, activation='relu'),
    Dense(1, activation='sigmoid')  # Binary classification
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_split=0.2)

# Predict on the test set
y_pred = (model.predict(X_test) > 0.5).astype(int)

# Accuracy
print("Accuracy:", accuracy_score(y_test, y_pred))

# Confusion matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", cm)

# Classification report
print("Classification Report:\n", classification_report(y_test, y_pred, target_names=['Fake', 'Genuine']))

def plot_roc_curve(y_test, y_pred_probs):
    fpr, tpr, _ = roc_curve(y_test, y_pred_probs)
    roc_auc = auc(fpr, tpr)

    plt.figure()
    plt.plot(fpr, tpr, color='blue', label=f'ROC curve (AUC = {roc_auc:.2f})')
    plt.plot([0, 1], [0, 1], color='red', linestyle='--')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver Operating Characteristic (ROC) Curve')
    plt.legend(loc="lower right")
    plt.show()

# Plot the ROC curve
y_pred_probs = model.predict(X_test).ravel()
plot_roc_curve(y_test, y_pred_probs)

# Example test data for a single user
# Example user data for Davide Dellacasa
user_data = pd.DataFrame({
    'name': ['Davide Dellacasa'],
    'statuses_count': [20370],
    'followers_count': [5470],
    'friends_count': [2385],
    'favourites_count': [145],
    'listed_count': [52],
    'lang': ['it']  # Assuming the language is Italian ("it")
})

# Extract features from the test data
user_data = extract_features(user_data)

# Normalize the test data
user_data_scaled = scaler.transform(user_data)

# Predict using the trained ANN model
user_pred_prob = model.predict(user_data_scaled)

# Convert the prediction probability to binary class (Fake=0, Genuine=1)
user_pred = (user_pred_prob > 0.5).astype(int)

# Output the prediction
print(f"The user is predicted to be: {'Genuine' if user_pred[0] == 1 else 'Fake'}")